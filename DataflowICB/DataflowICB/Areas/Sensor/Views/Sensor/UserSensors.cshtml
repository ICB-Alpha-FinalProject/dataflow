@model IEnumerable<SensorViewModel>

@Styles.Render("~/bundles/tables-css")
<!-- Example DataTables Card-->
<div class="card mb-3">
    <div class="card-header">
        <i class="fa fa-table"></i> My Sensors
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-bordered" id="dataTable" width="100%" cellspacing="0">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Measurement Type</th>
                        <th>Description</th>
                        <th>Online</th>
                        <th>Current Value</th>
                        <th>Public</th>
                        <th>Functionality</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var sensor in @Model)
                    {
                        <tr>
                            <td>@sensor.Name</td>
                            <td>@sensor.MeasurementType</td>
                            <td>@sensor.Description</td>
                            <td>@sensor.IsConnected</td>
                            <td id="@sensor.Id">@Html.ValueRange(sensor.CurrentValue, sensor.MinValue, sensor.MaxValue)</td>
                            <td>@sensor.IsPublic</td>
                            <td>
                                @Html.ActionLink("[Edit]", "EditSensor",
                                        new { id = sensor.Id })

                                @Html.ActionLink("[Details]", "ShowDetails",
                                        new { id = sensor.Id })

                                @Html.ActionLink("[Share]", "ShareSensor",
                                        new { id = sensor.Id })

                            </td>
                        </tr>
                    }

                </tbody>
            </table>
        </div>
    </div>
    <div class="card-footer small text-muted">Updated yesterday at 11:59 PM</div>
</div>
<!-- /.container-fluid-->
<!-- /.content-wrapper-->

@section  scripts{
    @Scripts.Render("~/bundles/tables-js")
    @Scripts.Render("~/bundles/jquery")
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.2.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->



    <script>
        $(function () {
        var update = $.connection.sensorUpdate;
        $.connection.hub.start().done(function () {
        setInterval(function () {
        let data = []
        @{
            var list = new List<int>();
            foreach (var sensor in Model.ToList())
            {
                int id = sensor.Id;
                <text>
                    data.push(@id);
                </text>
            }
        }
        update.server.send(data)
        }, 1000);

        });

        update.client.updateChart =
            function (sensorsUpdate) {
                sensorsUpdate = JSON.parse(sensorsUpdate);
                //console.log(sensorsUpdate);
                for (let update of sensorsUpdate) {
                    let id = update.Id;

                    $(`td#${id}`).html(parseSpan(update.Value, update.MinValue,
                        update.MaxValue, update.IsValueType))
                    }
                 }
        })



        $('a').on('click', function () {
        let href = $(this).attr('href')
        let id = href.split('/').reverse()[0]
        $('.div-form').attr('hidden', 'hidden')
        let divId = '#' + id;
        $(divId).removeAttr('hidden')
        })

        function parseSpan(currValue, min, max, isValue) {

            let classVal = "";
            let span = "";
            if (isValue) {
                if (currValue < min) {
                    classVal = "fa fa-exclamation-triangle text-primary";
                }else if (currValue > max) {
                    classVal = "text-danger fa fa-exclamation-triangle";
                } else {
                    classVal = "text-success";
                }
                span = `<span class="${classVal}">${currValue}</span>`

            }
            else {
                classVal = currValue == "False" ? "fa fa-window-close" : "fa fa-check";
                span = `<span class="${classVal}"></span>`

            }
            return span;
        }

        function tryParseFloat(str, defaultValue) {
            return parseFloat(str) == str ?
                parseFloat(str) : defaultValue;
        }
    </script>

}

